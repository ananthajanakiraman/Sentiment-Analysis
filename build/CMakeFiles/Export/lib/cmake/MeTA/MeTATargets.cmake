# Generated by CMake 3.6.2

if("${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}" LESS 2.5)
   message(FATAL_ERROR "CMake >= 2.6.0 required")
endif()
cmake_policy(PUSH)
cmake_policy(VERSION 2.6)
#----------------------------------------------------------------
# Generated CMake target import file.
#----------------------------------------------------------------

# Commands may need to know the format version.
set(CMAKE_IMPORT_FILE_VERSION 1)

# Protect against multiple inclusion, which would fail when already imported targets are added once more.
set(_targetsDefined)
set(_targetsNotDefined)
set(_expectedTargets)
foreach(_expectedTarget meta-filters meta-tokenizers meta-analyzers meta-kernel meta-classify meta-corpus meta-embeddings meta-features meta-eval meta-ranker meta-index meta-io meta-loss meta-learn meta-lm-analyzers meta-language-model meta-parser-featurizers meta-parser-analyzers meta-parser-io meta-parser-trees meta-tree-visitors meta-parser meta-regression meta-sequence-analyzers meta-crf meta-sequence meta-greedy-tagger meta-stats meta-succinct meta-topics meta-utf meta-util meta-definitions)
  list(APPEND _expectedTargets ${_expectedTarget})
  if(NOT TARGET ${_expectedTarget})
    list(APPEND _targetsNotDefined ${_expectedTarget})
  endif()
  if(TARGET ${_expectedTarget})
    list(APPEND _targetsDefined ${_expectedTarget})
  endif()
endforeach()
if("${_targetsDefined}" STREQUAL "${_expectedTargets}")
  unset(_targetsDefined)
  unset(_targetsNotDefined)
  unset(_expectedTargets)
  set(CMAKE_IMPORT_FILE_VERSION)
  cmake_policy(POP)
  return()
endif()
if(NOT "${_targetsDefined}" STREQUAL "")
  message(FATAL_ERROR "Some (but not all) targets in this export set were already defined.\nTargets Defined: ${_targetsDefined}\nTargets not yet defined: ${_targetsNotDefined}\n")
endif()
unset(_targetsDefined)
unset(_targetsNotDefined)
unset(_expectedTargets)


# Compute the installation prefix relative to this file.
get_filename_component(_IMPORT_PREFIX "${CMAKE_CURRENT_LIST_FILE}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)
get_filename_component(_IMPORT_PREFIX "${_IMPORT_PREFIX}" PATH)

# Create imported target meta-filters
add_library(meta-filters STATIC IMPORTED)

set_target_properties(meta-filters PROPERTIES
  INTERFACE_LINK_LIBRARIES "meta-utf;meta-tokenizers;meta-io"
)

# Create imported target meta-tokenizers
add_library(meta-tokenizers STATIC IMPORTED)

set_target_properties(meta-tokenizers PROPERTIES
  INTERFACE_LINK_LIBRARIES "meta-utf;cpptoml"
)

# Create imported target meta-analyzers
add_library(meta-analyzers STATIC IMPORTED)

set_target_properties(meta-analyzers PROPERTIES
  INTERFACE_LINK_LIBRARIES "meta-corpus;meta-filters;meta-tokenizers"
)

# Create imported target meta-kernel
add_library(meta-kernel STATIC IMPORTED)

set_target_properties(meta-kernel PROPERTIES
  INTERFACE_LINK_LIBRARIES "meta-definitions;cpptoml"
)

# Create imported target meta-classify
add_library(meta-classify STATIC IMPORTED)

set_target_properties(meta-classify PROPERTIES
  INTERFACE_LINK_LIBRARIES "meta-ranker;meta-learn;meta-kernel"
)

# Create imported target meta-corpus
add_library(meta-corpus STATIC IMPORTED)

set_target_properties(meta-corpus PROPERTIES
  INTERFACE_LINK_LIBRARIES "meta-io;meta-utf;cpptoml"
)

# Create imported target meta-embeddings
add_library(meta-embeddings STATIC IMPORTED)

set_target_properties(meta-embeddings PROPERTIES
  INTERFACE_LINK_LIBRARIES "cpptoml;meta-util"
)

# Create imported target meta-features
add_library(meta-features STATIC IMPORTED)

set_target_properties(meta-features PROPERTIES
  INTERFACE_LINK_LIBRARIES "meta-index;meta-succinct"
)

# Create imported target meta-eval
add_library(meta-eval STATIC IMPORTED)

set_target_properties(meta-eval PROPERTIES
  INTERFACE_LINK_LIBRARIES "meta-definitions;cpptoml"
)

# Create imported target meta-ranker
add_library(meta-ranker STATIC IMPORTED)

set_target_properties(meta-ranker PROPERTIES
  INTERFACE_LINK_LIBRARIES "meta-index"
)

# Create imported target meta-index
add_library(meta-index STATIC IMPORTED)

set_target_properties(meta-index PROPERTIES
  INTERFACE_LINK_LIBRARIES "meta-analyzers;meta-eval"
)

# Create imported target meta-io
add_library(meta-io STATIC IMPORTED)

set_target_properties(meta-io PROPERTIES
  INTERFACE_LINK_LIBRARIES "meta-util;/usr/lib/libz.dylib"
)

# Create imported target meta-loss
add_library(meta-loss STATIC IMPORTED)

set_target_properties(meta-loss PROPERTIES
  INTERFACE_LINK_LIBRARIES "meta-definitions"
)

# Create imported target meta-learn
add_library(meta-learn STATIC IMPORTED)

set_target_properties(meta-learn PROPERTIES
  INTERFACE_LINK_LIBRARIES "meta-io;meta-loss;cpptoml"
)

# Create imported target meta-lm-analyzers
add_library(meta-lm-analyzers STATIC IMPORTED)

set_target_properties(meta-lm-analyzers PROPERTIES
  INTERFACE_LINK_LIBRARIES "meta-analyzers;meta-language-model"
)

# Create imported target meta-language-model
add_library(meta-language-model STATIC IMPORTED)

set_target_properties(meta-language-model PROPERTIES
  INTERFACE_LINK_LIBRARIES "meta-corpus;meta-analyzers;meta-succinct"
)

# Create imported target meta-parser-featurizers
add_library(meta-parser-featurizers STATIC IMPORTED)

set_target_properties(meta-parser-featurizers PROPERTIES
  INTERFACE_LINK_LIBRARIES "meta-parser-trees;meta-corpus"
)

# Create imported target meta-parser-analyzers
add_library(meta-parser-analyzers STATIC IMPORTED)

set_target_properties(meta-parser-analyzers PROPERTIES
  INTERFACE_LINK_LIBRARIES "meta-analyzers;meta-parser-featurizers;meta-parser;meta-greedy-tagger"
)

# Create imported target meta-parser-io
add_library(meta-parser-io STATIC IMPORTED)

set_target_properties(meta-parser-io PROPERTIES
  INTERFACE_LINK_LIBRARIES "meta-parser-trees"
)

# Create imported target meta-parser-trees
add_library(meta-parser-trees STATIC IMPORTED)

set_target_properties(meta-parser-trees PROPERTIES
  INTERFACE_LINK_LIBRARIES "meta-definitions"
)

# Create imported target meta-tree-visitors
add_library(meta-tree-visitors STATIC IMPORTED)

set_target_properties(meta-tree-visitors PROPERTIES
  INTERFACE_LINK_LIBRARIES "meta-parser-trees"
)

# Create imported target meta-parser
add_library(meta-parser STATIC IMPORTED)

set_target_properties(meta-parser PROPERTIES
  INTERFACE_LINK_LIBRARIES "meta-parser-trees;meta-tree-visitors;meta-parser-io;meta-io;meta-sequence;meta-util"
)

# Create imported target meta-regression
add_library(meta-regression STATIC IMPORTED)

set_target_properties(meta-regression PROPERTIES
  INTERFACE_LINK_LIBRARIES "meta-learn"
)

# Create imported target meta-sequence-analyzers
add_library(meta-sequence-analyzers STATIC IMPORTED)

set_target_properties(meta-sequence-analyzers PROPERTIES
  INTERFACE_LINK_LIBRARIES "meta-analyzers;meta-crf"
)

# Create imported target meta-crf
add_library(meta-crf STATIC IMPORTED)

set_target_properties(meta-crf PROPERTIES
  INTERFACE_LINK_LIBRARIES "meta-sequence"
)

# Create imported target meta-sequence
add_library(meta-sequence STATIC IMPORTED)

set_target_properties(meta-sequence PROPERTIES
  INTERFACE_LINK_LIBRARIES "meta-io;meta-utf"
)

# Create imported target meta-greedy-tagger
add_library(meta-greedy-tagger STATIC IMPORTED)

set_target_properties(meta-greedy-tagger PROPERTIES
  INTERFACE_LINK_LIBRARIES "meta-sequence;meta-io"
)

# Create imported target meta-stats
add_library(meta-stats STATIC IMPORTED)

set_target_properties(meta-stats PROPERTIES
  INTERFACE_LINK_LIBRARIES "meta-definitions"
)

# Create imported target meta-succinct
add_library(meta-succinct STATIC IMPORTED)

set_target_properties(meta-succinct PROPERTIES
  INTERFACE_LINK_LIBRARIES "meta-io"
)

# Create imported target meta-topics
add_library(meta-topics STATIC IMPORTED)

set_target_properties(meta-topics PROPERTIES
  INTERFACE_LINK_LIBRARIES "meta-index"
)

# Create imported target meta-utf
add_library(meta-utf STATIC IMPORTED)

set_target_properties(meta-utf PROPERTIES
  INTERFACE_LINK_LIBRARIES "meta-definitions;/usr/local/opt/icu4c/lib/libicudata.dylib;/usr/local/opt/icu4c/lib/libicui18n.dylib;/usr/local/opt/icu4c/lib/libicuuc.dylib"
)

# Create imported target meta-util
add_library(meta-util STATIC IMPORTED)

set_target_properties(meta-util PROPERTIES
  INTERFACE_LINK_LIBRARIES "meta-definitions"
)

# Create imported target meta-definitions
add_library(meta-definitions INTERFACE IMPORTED)

set_target_properties(meta-definitions PROPERTIES
  INTERFACE_COMPILE_DEFINITIONS "_DARWIN_USE_64_BIT_INODE=1;META_IS_DARWIN=1"
  INTERFACE_COMPILE_OPTIONS "-Wall;-Wextra;-pedantic;-Wconversion;-stdlib=libc++"
  INTERFACE_INCLUDE_DIRECTORIES "${_IMPORT_PREFIX}/include;/usr/include;/Library/Developer/CommandLineTools/usr/include/c++/v1/;${_IMPORT_PREFIX}/include"
  INTERFACE_LINK_LIBRARIES "/usr/lib/libdl.dylib;/usr/lib/libc++abi.dylib;-L/usr/lib;/usr/lib/libc++.dylib;/usr/local/lib/libjemalloc.dylib"
  INTERFACE_SYSTEM_INCLUDE_DIRECTORIES "/usr/include;/Library/Developer/CommandLineTools/usr/include/c++/v1/"
)

if(CMAKE_VERSION VERSION_LESS 3.0.0)
  message(FATAL_ERROR "This file relies on consumers using CMake 3.0.0 or greater.")
endif()

# Load information for each installed configuration.
get_filename_component(_DIR "${CMAKE_CURRENT_LIST_FILE}" PATH)
file(GLOB CONFIG_FILES "${_DIR}/MeTATargets-*.cmake")
foreach(f ${CONFIG_FILES})
  include(${f})
endforeach()

# Cleanup temporary variables.
set(_IMPORT_PREFIX)

# Loop over all imported files and verify that they actually exist
foreach(target ${_IMPORT_CHECK_TARGETS} )
  foreach(file ${_IMPORT_CHECK_FILES_FOR_${target}} )
    if(NOT EXISTS "${file}" )
      message(FATAL_ERROR "The imported target \"${target}\" references the file
   \"${file}\"
but this file does not exist.  Possible reasons include:
* The file was deleted, renamed, or moved to another location.
* An install or uninstall procedure did not complete successfully.
* The installation package was faulty and contained
   \"${CMAKE_CURRENT_LIST_FILE}\"
but not all the files it references.
")
    endif()
  endforeach()
  unset(_IMPORT_CHECK_FILES_FOR_${target})
endforeach()
unset(_IMPORT_CHECK_TARGETS)

# Make sure the targets which have been exported in some other 
# export set exist.
unset(${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets)
foreach(_target "cpptoml" )
  if(NOT TARGET "${_target}" )
    set(${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets "${${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets} ${_target}")
  endif()
endforeach()

if(DEFINED ${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets)
  if(CMAKE_FIND_PACKAGE_NAME)
    set( ${CMAKE_FIND_PACKAGE_NAME}_FOUND FALSE)
    set( ${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE "The following imported targets are referenced, but are missing: ${${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets}")
  else()
    message(FATAL_ERROR "The following imported targets are referenced, but are missing: ${${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets}")
  endif()
endif()
unset(${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE_targets)

# Commands beyond this point should not need to know the version.
set(CMAKE_IMPORT_FILE_VERSION)
cmake_policy(POP)
